
PruebaBolos.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  0000045c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003e8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800200  00800200  0000045c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000045c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000048c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  000004c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000115f  00000000  00000000  00000580  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e32  00000000  00000000  000016df  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000709  00000000  00000000  00002511  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000019c  00000000  00000000  00002c1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000072a  00000000  00000000  00002db8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000415  00000000  00000000  000034e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  000038f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__ctors_end>
   4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
   8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
   c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  10:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  14:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  18:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  1c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  20:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  24:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  28:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  2c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  30:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  34:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  38:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  3c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  40:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  44:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  48:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  4c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  50:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  54:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  58:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  5c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  60:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  64:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  68:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  6c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  70:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  74:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  78:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  7c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  80:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  84:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  88:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  8c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  90:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  94:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  98:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  9c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  ac:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__vector_43>
  b0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  bc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  cc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  d0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  d4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  d8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  dc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e4:	f9 00       	.word	0x00f9	; ????
  e6:	0d 01       	movw	r0, r26
  e8:	fb 00       	.word	0x00fb	; ????
  ea:	fd 00       	.word	0x00fd	; ????
  ec:	ff 00       	.word	0x00ff	; ????
  ee:	01 01       	movw	r0, r2
  f0:	03 01       	movw	r0, r6
  f2:	05 01       	movw	r0, r10
  f4:	07 01       	movw	r0, r14
  f6:	09 01       	movw	r0, r18

000000f8 <__ctors_end>:
  f8:	11 24       	eor	r1, r1
  fa:	1f be       	out	0x3f, r1	; 63
  fc:	cf ef       	ldi	r28, 0xFF	; 255
  fe:	d1 e2       	ldi	r29, 0x21	; 33
 100:	de bf       	out	0x3e, r29	; 62
 102:	cd bf       	out	0x3d, r28	; 61

00000104 <__do_copy_data>:
 104:	12 e0       	ldi	r17, 0x02	; 2
 106:	a0 e0       	ldi	r26, 0x00	; 0
 108:	b2 e0       	ldi	r27, 0x02	; 2
 10a:	e8 ee       	ldi	r30, 0xE8	; 232
 10c:	f3 e0       	ldi	r31, 0x03	; 3
 10e:	02 c0       	rjmp	.+4      	; 0x114 <__do_copy_data+0x10>
 110:	05 90       	lpm	r0, Z+
 112:	0d 92       	st	X+, r0
 114:	a0 30       	cpi	r26, 0x00	; 0
 116:	b1 07       	cpc	r27, r17
 118:	d9 f7       	brne	.-10     	; 0x110 <__do_copy_data+0xc>

0000011a <__do_clear_bss>:
 11a:	22 e0       	ldi	r18, 0x02	; 2
 11c:	a0 e0       	ldi	r26, 0x00	; 0
 11e:	b2 e0       	ldi	r27, 0x02	; 2
 120:	01 c0       	rjmp	.+2      	; 0x124 <.do_clear_bss_start>

00000122 <.do_clear_bss_loop>:
 122:	1d 92       	st	X+, r1

00000124 <.do_clear_bss_start>:
 124:	a8 30       	cpi	r26, 0x08	; 8
 126:	b2 07       	cpc	r27, r18
 128:	e1 f7       	brne	.-8      	; 0x122 <.do_clear_bss_loop>
 12a:	0e 94 a5 01 	call	0x34a	; 0x34a <main>
 12e:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <_exit>

00000132 <__bad_interrupt>:
 132:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000136 <configBolos>:

void setFlagsToOne(uint8_t* flags)
{
	if(flags != NULL)
	{
		for(uint8_t i = 0; i < 6; i++)
 136:	1a b8       	out	0x0a, r1	; 10
 138:	08 95       	ret

0000013a <detectarBolos>:
 13a:	0f 93       	push	r16
 13c:	1f 93       	push	r17
 13e:	cf 93       	push	r28
 140:	df 93       	push	r29
 142:	00 97       	sbiw	r24, 0x00	; 0
 144:	d9 f1       	breq	.+118    	; 0x1bc <detectarBolos+0x82>
 146:	61 15       	cp	r22, r1
 148:	71 05       	cpc	r23, r1
 14a:	c1 f1       	breq	.+112    	; 0x1bc <detectarBolos+0x82>
 14c:	eb 01       	movw	r28, r22
 14e:	8c 01       	movw	r16, r24
 150:	4f 99       	sbic	0x09, 7	; 9
 152:	07 c0       	rjmp	.+14     	; 0x162 <detectarBolos+0x28>
 154:	88 81       	ld	r24, Y
 156:	81 11       	cpse	r24, r1
 158:	04 c0       	rjmp	.+8      	; 0x162 <detectarBolos+0x28>
 15a:	f8 01       	movw	r30, r16
 15c:	09 95       	icall
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	88 83       	st	Y, r24
 162:	4e 99       	sbic	0x09, 6	; 9
 164:	07 c0       	rjmp	.+14     	; 0x174 <detectarBolos+0x3a>
 166:	89 81       	ldd	r24, Y+1	; 0x01
 168:	81 11       	cpse	r24, r1
 16a:	04 c0       	rjmp	.+8      	; 0x174 <detectarBolos+0x3a>
 16c:	f8 01       	movw	r30, r16
 16e:	09 95       	icall
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	89 83       	std	Y+1, r24	; 0x01
 174:	4d 99       	sbic	0x09, 5	; 9
 176:	07 c0       	rjmp	.+14     	; 0x186 <detectarBolos+0x4c>
 178:	8a 81       	ldd	r24, Y+2	; 0x02
 17a:	81 11       	cpse	r24, r1
 17c:	04 c0       	rjmp	.+8      	; 0x186 <detectarBolos+0x4c>
 17e:	f8 01       	movw	r30, r16
 180:	09 95       	icall
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	8a 83       	std	Y+2, r24	; 0x02
 186:	4c 99       	sbic	0x09, 4	; 9
 188:	07 c0       	rjmp	.+14     	; 0x198 <detectarBolos+0x5e>
 18a:	8b 81       	ldd	r24, Y+3	; 0x03
 18c:	81 11       	cpse	r24, r1
 18e:	04 c0       	rjmp	.+8      	; 0x198 <detectarBolos+0x5e>
 190:	f8 01       	movw	r30, r16
 192:	09 95       	icall
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	8b 83       	std	Y+3, r24	; 0x03
 198:	4b 99       	sbic	0x09, 3	; 9
 19a:	07 c0       	rjmp	.+14     	; 0x1aa <detectarBolos+0x70>
 19c:	8c 81       	ldd	r24, Y+4	; 0x04
 19e:	81 11       	cpse	r24, r1
 1a0:	04 c0       	rjmp	.+8      	; 0x1aa <detectarBolos+0x70>
 1a2:	f8 01       	movw	r30, r16
 1a4:	09 95       	icall
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	8c 83       	std	Y+4, r24	; 0x04
 1aa:	4a 99       	sbic	0x09, 2	; 9
 1ac:	07 c0       	rjmp	.+14     	; 0x1bc <detectarBolos+0x82>
 1ae:	8d 81       	ldd	r24, Y+5	; 0x05
 1b0:	81 11       	cpse	r24, r1
 1b2:	04 c0       	rjmp	.+8      	; 0x1bc <detectarBolos+0x82>
 1b4:	f8 01       	movw	r30, r16
 1b6:	09 95       	icall
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	8d 83       	std	Y+5, r24	; 0x05
 1bc:	df 91       	pop	r29
 1be:	cf 91       	pop	r28
 1c0:	1f 91       	pop	r17
 1c2:	0f 91       	pop	r16
 1c4:	08 95       	ret

000001c6 <setFlagsToZero>:
		}
	}
}

void setFlagsToZero(uint8_t* flags)
{
 1c6:	9c 01       	movw	r18, r24
	if(flags != NULL)
 1c8:	89 2b       	or	r24, r25
 1ca:	39 f4       	brne	.+14     	; 0x1da <setFlagsToZero+0x14>
 1cc:	08 95       	ret
	{
		for(uint8_t i = 0; i < 6; i++)
		{
			flags[i] = 0;
 1ce:	f9 01       	movw	r30, r18
 1d0:	e9 0f       	add	r30, r25
 1d2:	f1 1d       	adc	r31, r1
 1d4:	10 82       	st	Z, r1

void setFlagsToZero(uint8_t* flags)
{
	if(flags != NULL)
	{
		for(uint8_t i = 0; i < 6; i++)
 1d6:	9f 5f       	subi	r25, 0xFF	; 255
 1d8:	01 c0       	rjmp	.+2      	; 0x1dc <setFlagsToZero+0x16>
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	96 30       	cpi	r25, 0x06	; 6
 1de:	b8 f3       	brcs	.-18     	; 0x1ce <setFlagsToZero+0x8>
 1e0:	08 95       	ret

000001e2 <display_d2s>:
	modo = S_DISPLAY_MODO_NORMAL;
}

void display_setOFF()
{
	modo = S_APAGADO;
 1e2:	8a 30       	cpi	r24, 0x0A	; 10
 1e4:	91 05       	cpc	r25, r1
 1e6:	b8 f4       	brcc	.+46     	; 0x216 <display_d2s+0x34>
 1e8:	fc 01       	movw	r30, r24
 1ea:	ee 58       	subi	r30, 0x8E	; 142
 1ec:	ff 4f       	sbci	r31, 0xFF	; 255
 1ee:	0c 94 d8 01 	jmp	0x3b0	; 0x3b0 <__tablejump2__>
 1f2:	8f e3       	ldi	r24, 0x3F	; 63
 1f4:	08 95       	ret
 1f6:	8b e5       	ldi	r24, 0x5B	; 91
 1f8:	08 95       	ret
 1fa:	8f e4       	ldi	r24, 0x4F	; 79
 1fc:	08 95       	ret
 1fe:	86 e6       	ldi	r24, 0x66	; 102
 200:	08 95       	ret
 202:	8d e6       	ldi	r24, 0x6D	; 109
 204:	08 95       	ret
 206:	8d e7       	ldi	r24, 0x7D	; 125
 208:	08 95       	ret
 20a:	87 e0       	ldi	r24, 0x07	; 7
 20c:	08 95       	ret
 20e:	8f e7       	ldi	r24, 0x7F	; 127
 210:	08 95       	ret
 212:	8f e6       	ldi	r24, 0x6F	; 111
 214:	08 95       	ret
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	08 95       	ret
 21a:	86 e0       	ldi	r24, 0x06	; 6
 21c:	08 95       	ret

0000021e <display_setNumber>:
 21e:	0f 93       	push	r16
 220:	1f 93       	push	r17
 222:	cf 93       	push	r28
 224:	df 93       	push	r29
 226:	6a e0       	ldi	r22, 0x0A	; 10
 228:	70 e0       	ldi	r23, 0x00	; 0
 22a:	0e 94 c4 01 	call	0x388	; 0x388 <__divmodhi4>
 22e:	8b 01       	movw	r16, r22
 230:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <display_d2s>
 234:	c6 e0       	ldi	r28, 0x06	; 6
 236:	d2 e0       	ldi	r29, 0x02	; 2
 238:	88 83       	st	Y, r24
 23a:	c8 01       	movw	r24, r16
 23c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <display_d2s>
 240:	89 83       	std	Y+1, r24	; 0x01
 242:	df 91       	pop	r29
 244:	cf 91       	pop	r28
 246:	1f 91       	pop	r17
 248:	0f 91       	pop	r16
 24a:	08 95       	ret

0000024c <display_update>:
 24c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 250:	81 11       	cpse	r24, r1
 252:	07 c0       	rjmp	.+14     	; 0x262 <display_update+0x16>
 254:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <digits>
 258:	85 b9       	out	0x05, r24	; 5
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
 260:	08 95       	ret
 262:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <digits+0x1>
 266:	80 68       	ori	r24, 0x80	; 128
 268:	85 b9       	out	0x05, r24	; 5
 26a:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__DATA_REGION_ORIGIN__>
 26e:	08 95       	ret

00000270 <display_setup>:
 270:	f8 94       	cli
 272:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f00a0>
 276:	8c e0       	ldi	r24, 0x0C	; 12
 278:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7f00a1>
 27c:	84 e0       	ldi	r24, 0x04	; 4
 27e:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x7f0072>
 282:	15 b8       	out	0x05, r1	; 5
 284:	8f ef       	ldi	r24, 0xFF	; 255
 286:	84 b9       	out	0x04, r24	; 4
 288:	88 e3       	ldi	r24, 0x38	; 56
 28a:	91 e0       	ldi	r25, 0x01	; 1
 28c:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7f00a9>
 290:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7f00a8>
 294:	78 94       	sei
 296:	08 95       	ret

00000298 <display_p>:
}

void display_p()
{
	modo = S_DISPLAY_MODO_PARPADEANDO;
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <modo>
 29e:	08 95       	ret

000002a0 <__vector_43>:
}

ISR(TIMER4_COMPB_vect)
{
 2a0:	1f 92       	push	r1
 2a2:	0f 92       	push	r0
 2a4:	0f b6       	in	r0, 0x3f	; 63
 2a6:	0f 92       	push	r0
 2a8:	11 24       	eor	r1, r1
 2aa:	2f 93       	push	r18
 2ac:	3f 93       	push	r19
 2ae:	4f 93       	push	r20
 2b0:	5f 93       	push	r21
 2b2:	6f 93       	push	r22
 2b4:	7f 93       	push	r23
 2b6:	8f 93       	push	r24
 2b8:	9f 93       	push	r25
 2ba:	af 93       	push	r26
 2bc:	bf 93       	push	r27
 2be:	ef 93       	push	r30
 2c0:	ff 93       	push	r31
	switch(modo)
 2c2:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <modo>
 2c6:	81 30       	cpi	r24, 0x01	; 1
 2c8:	41 f0       	breq	.+16     	; 0x2da <__vector_43+0x3a>
 2ca:	20 f0       	brcs	.+8      	; 0x2d4 <__vector_43+0x34>
 2cc:	82 30       	cpi	r24, 0x02	; 2
 2ce:	01 f5       	brne	.+64     	; 0x310 <__vector_43+0x70>
	{
		case S_APAGADO:
			DISPLAY_PORT = 0x00;
 2d0:	15 b8       	out	0x05, r1	; 5
			break;
 2d2:	1e c0       	rjmp	.+60     	; 0x310 <__vector_43+0x70>
			
		case  S_DISPLAY_MODO_NORMAL:
			display_update();
 2d4:	0e 94 26 01 	call	0x24c	; 0x24c <display_update>
			break;
 2d8:	1b c0       	rjmp	.+54     	; 0x310 <__vector_43+0x70>
			
		case S_DISPLAY_MODO_PARPADEANDO:
			
			contador++;
 2da:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <contador>
 2de:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <contador+0x1>
 2e2:	01 96       	adiw	r24, 0x01	; 1
 2e4:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <contador+0x1>
 2e8:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <contador>
			
			if((contador >= 90))
 2ec:	8a 35       	cpi	r24, 0x5A	; 90
 2ee:	91 05       	cpc	r25, r1
 2f0:	14 f0       	brlt	.+4      	; 0x2f6 <__vector_43+0x56>
			{
				DISPLAY_PORT = 0x00;
 2f2:	15 b8       	out	0x05, r1	; 5
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <__vector_43+0x5a>
				
			}
			else
			{
				display_update();
 2f6:	0e 94 26 01 	call	0x24c	; 0x24c <display_update>
			}
			
			if(contador == 100)
 2fa:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <contador>
 2fe:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <contador+0x1>
 302:	84 36       	cpi	r24, 0x64	; 100
 304:	91 05       	cpc	r25, r1
 306:	21 f4       	brne	.+8      	; 0x310 <__vector_43+0x70>
			{
				contador = 0;
 308:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <contador+0x1>
 30c:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <contador>
	}
	
	
	//display_update();

}
 310:	ff 91       	pop	r31
 312:	ef 91       	pop	r30
 314:	bf 91       	pop	r27
 316:	af 91       	pop	r26
 318:	9f 91       	pop	r25
 31a:	8f 91       	pop	r24
 31c:	7f 91       	pop	r23
 31e:	6f 91       	pop	r22
 320:	5f 91       	pop	r21
 322:	4f 91       	pop	r20
 324:	3f 91       	pop	r19
 326:	2f 91       	pop	r18
 328:	0f 90       	pop	r0
 32a:	0f be       	out	0x3f, r0	; 63
 32c:	0f 90       	pop	r0
 32e:	1f 90       	pop	r1
 330:	18 95       	reti

00000332 <sumarPuntuacion>:
// ########################## Definicion de funciones ############################

// Se llama cada vez que se tira un bolo y suma puntuacion a una variable global
void sumarPuntuacion()
{	
	(puntuacion) += 5;
 332:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <puntuacion>
 336:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <puntuacion+0x1>
 33a:	05 96       	adiw	r24, 0x05	; 5
 33c:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <puntuacion+0x1>
 340:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <puntuacion>
	display_setNumber(puntuacion);
 344:	0e 94 0f 01 	call	0x21e	; 0x21e <display_setNumber>
 348:	08 95       	ret

0000034a <main>:
}

// ################################ Programa principal ##########################
int main(void)
{
 34a:	cf 93       	push	r28
 34c:	df 93       	push	r29
 34e:	00 d0       	rcall	.+0      	; 0x350 <main+0x6>
 350:	00 d0       	rcall	.+0      	; 0x352 <main+0x8>
 352:	00 d0       	rcall	.+0      	; 0x354 <main+0xa>
 354:	cd b7       	in	r28, 0x3d	; 61
 356:	de b7       	in	r29, 0x3e	; 62
	// Bandera que indica si un bolo esta disponible para tirar
	// o ya ha sido tirado 
	uint8_t banderas[6];
	
	// Ponemos a 0 las banderas
	setFlagsToZero(banderas);
 358:	ce 01       	movw	r24, r28
 35a:	01 96       	adiw	r24, 0x01	; 1
 35c:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <setFlagsToZero>
	
	// Configuracion de los pines para los bolos
	configBolos();
 360:	0e 94 9b 00 	call	0x136	; 0x136 <configBolos>
	
	// Configuracion del display
	display_setup();
 364:	0e 94 38 01 	call	0x270	; 0x270 <display_setup>
	display_setNumber(puntuacion);
 368:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <puntuacion>
 36c:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <puntuacion+0x1>
 370:	0e 94 0f 01 	call	0x21e	; 0x21e <display_setNumber>
	display_p();
 374:	0e 94 4c 01 	call	0x298	; 0x298 <display_p>
	
	
    while (1) 
    {
		//display_update();
		detectarBolos(sumarPuntuacion, banderas);	
 378:	be 01       	movw	r22, r28
 37a:	6f 5f       	subi	r22, 0xFF	; 255
 37c:	7f 4f       	sbci	r23, 0xFF	; 255
 37e:	89 e9       	ldi	r24, 0x99	; 153
 380:	91 e0       	ldi	r25, 0x01	; 1
 382:	0e 94 9d 00 	call	0x13a	; 0x13a <detectarBolos>
 386:	f8 cf       	rjmp	.-16     	; 0x378 <main+0x2e>

00000388 <__divmodhi4>:
 388:	97 fb       	bst	r25, 7
 38a:	07 2e       	mov	r0, r23
 38c:	16 f4       	brtc	.+4      	; 0x392 <__divmodhi4+0xa>
 38e:	00 94       	com	r0
 390:	07 d0       	rcall	.+14     	; 0x3a0 <__divmodhi4_neg1>
 392:	77 fd       	sbrc	r23, 7
 394:	09 d0       	rcall	.+18     	; 0x3a8 <__divmodhi4_neg2>
 396:	0e 94 de 01 	call	0x3bc	; 0x3bc <__udivmodhi4>
 39a:	07 fc       	sbrc	r0, 7
 39c:	05 d0       	rcall	.+10     	; 0x3a8 <__divmodhi4_neg2>
 39e:	3e f4       	brtc	.+14     	; 0x3ae <__divmodhi4_exit>

000003a0 <__divmodhi4_neg1>:
 3a0:	90 95       	com	r25
 3a2:	81 95       	neg	r24
 3a4:	9f 4f       	sbci	r25, 0xFF	; 255
 3a6:	08 95       	ret

000003a8 <__divmodhi4_neg2>:
 3a8:	70 95       	com	r23
 3aa:	61 95       	neg	r22
 3ac:	7f 4f       	sbci	r23, 0xFF	; 255

000003ae <__divmodhi4_exit>:
 3ae:	08 95       	ret

000003b0 <__tablejump2__>:
 3b0:	ee 0f       	add	r30, r30
 3b2:	ff 1f       	adc	r31, r31
 3b4:	05 90       	lpm	r0, Z+
 3b6:	f4 91       	lpm	r31, Z
 3b8:	e0 2d       	mov	r30, r0
 3ba:	09 94       	ijmp

000003bc <__udivmodhi4>:
 3bc:	aa 1b       	sub	r26, r26
 3be:	bb 1b       	sub	r27, r27
 3c0:	51 e1       	ldi	r21, 0x11	; 17
 3c2:	07 c0       	rjmp	.+14     	; 0x3d2 <__udivmodhi4_ep>

000003c4 <__udivmodhi4_loop>:
 3c4:	aa 1f       	adc	r26, r26
 3c6:	bb 1f       	adc	r27, r27
 3c8:	a6 17       	cp	r26, r22
 3ca:	b7 07       	cpc	r27, r23
 3cc:	10 f0       	brcs	.+4      	; 0x3d2 <__udivmodhi4_ep>
 3ce:	a6 1b       	sub	r26, r22
 3d0:	b7 0b       	sbc	r27, r23

000003d2 <__udivmodhi4_ep>:
 3d2:	88 1f       	adc	r24, r24
 3d4:	99 1f       	adc	r25, r25
 3d6:	5a 95       	dec	r21
 3d8:	a9 f7       	brne	.-22     	; 0x3c4 <__udivmodhi4_loop>
 3da:	80 95       	com	r24
 3dc:	90 95       	com	r25
 3de:	bc 01       	movw	r22, r24
 3e0:	cd 01       	movw	r24, r26
 3e2:	08 95       	ret

000003e4 <_exit>:
 3e4:	f8 94       	cli

000003e6 <__stop_program>:
 3e6:	ff cf       	rjmp	.-2      	; 0x3e6 <__stop_program>
